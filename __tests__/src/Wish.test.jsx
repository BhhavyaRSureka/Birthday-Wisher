// ********RoostGPT********
// Test generated by RoostGPT for test ReactTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// __tests__/src/Wish.test.js

import React from 'react';
import { render } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Wish from '../../src/Wish'; // Corrected path for the test file location

describe('Wish Component', () => {
  test('renders the birthday message with the correct name', () => {
    const { getByText } = render(<Wish name="John" />);
    const wishMessageElement = getByText('HAPPY BIRTHDAY JOHN !!!');
    expect(wishMessageElement).toBeInTheDocument();
  });

  test('renders the birthday message with the name in uppercase', () => {
    const { getByText } = render(<Wish name="Jane" />);
    expect(getByText('HAPPY BIRTHDAY JANE !!!')).toHaveClass('highlight');
  });

  // It's also good practice to test edge cases such as no name or non-string values
  test('does not throw an error when name is an empty string', () => {
    const { getByText } = render(<Wish name="" />);
    expect(getByText('HAPPY BIRTHDAY  !!!')).toBeInTheDocument();
  });

  test('properly renders the birthday message when name contains numerical values', () => {
    const { getByText } = render(<Wish name="User123" />);
    expect(getByText('HAPPY BIRTHDAY USER123 !!!')).toBeInTheDocument();
  });

  // Additional tests could include scenarios with special characters, 
  // long names, names with spaces, or even error boundary cases if the component had more complexity.
});


