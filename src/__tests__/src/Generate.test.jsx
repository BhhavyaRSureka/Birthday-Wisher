// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// src/__tests__/src/Generate.test.jsx
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Generate from '../../Generate.jsx'; // Correct relative path from the test file to the component

describe('Generate component', () => {

  test('renders correctly', () => {
    render(<Generate />);
    expect(screen.getByText('Generate Here')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter Day')).toBeInTheDocument();
    expect(screen.getByLabelText('Select Month')).toBeInTheDocument();
    expect(screen.getByText('Generate Link')).toBeInTheDocument();
  });

  test('input changes update state', () => {
    render(<Generate />);
    fireEvent.change(screen.getByPlaceholderText('Enter Name'), { target: { value: 'Alice' } });
    fireEvent.change(screen.getByPlaceholderText('Enter Day'), { target: { value: '15' } });
    fireEvent.change(screen.getByLabelText('Select Month'), { target: { value: '6' } });
    expect(screen.getByPlaceholderText('Enter Name').value).toBe('Alice');
    expect(screen.getByPlaceholderText('Enter Day').value).toBe('15');
    expect(screen.getByLabelText('Select Month').value).toBe('6');
  });

  test('generate link button creates link', () => {
    render(<Generate />);
    fireEvent.change(screen.getByPlaceholderText('Enter Name'), { target: { value: 'Alice' } });
    fireEvent.change(screen.getByPlaceholderText('Enter Day'), { target: { value: '15' } });
    fireEvent.change(screen.getByLabelText('Select Month'), { target: { value: '6' } });
    fireEvent.click(screen.getByText('Generate Link'));
    expect(screen.getByText('Visit Link')).toBeInTheDocument();
    expect(screen.getByText(/https:\/\/birthday-wisher.netlify.app\/birthday\/Alice\/15\/6/)).toBeInTheDocument();
  });

  test('link is not visible when not generated', () => {
    render(<Generate />);
    expect(screen.queryByText('Visit Link')).toBeNull();
  });

  // Add more tests for edge cases and error handling as needed
});


