// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting123 using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { render } from '@testing-library/react';
import RouterBirthday from '../../RouterBirthday.jsx';
import Birthday from '../../Birthday.jsx';

// Mocking the Birthday component
jest.mock('../../Birthday.jsx', () => jest.fn((props) => <div data-testid="mock-birthday"></div>));

describe('RouterBirthday component', () => {
  // Setting up mock props for the RouterBirthday component
  const mockMatch = {
    params: {
      name: 'John Doe',
      day: '01',
      month: 'January'
    }
  };

  test('renders without crashing and passes correct props to Birthday component', () => {
    render(<RouterBirthday match={mockMatch} />);
    
    // Expect the Birthday component to be called with the correct props
    expect(Birthday).toHaveBeenCalledWith({
      name: 'John Doe',
      month: 'January',
      day: '01'
    }, {});
  });

  test('renders correctly with different props', () => {
    const newMockMatch = {
      params: {
        name: 'Jane Doe',
        day: '02',
        month: 'February'
      }
    };
    
    render(<RouterBirthday match={newMockMatch} />);
    
    // Expect the Birthday component to be called with the new props
    expect(Birthday).toHaveBeenCalledWith({
      name: 'Jane Doe',
      month: 'February',
      day: '02'
    }, {});
  });

  test('does not crash with no params', () => {
    const emptyMatch = { params: {} };
    render(<RouterBirthday match={emptyMatch} />);
    
    // Expect the Birthday component to still be called without throwing an error
    // This may prompt us to include prop-types or default props for the Birthday component
    expect(Birthday).toHaveBeenCalled();
  });
  
  // Add more tests here as needed, covering edge cases or possible error conditions

});

